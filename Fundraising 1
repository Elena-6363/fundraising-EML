// SPDX-License-Identifier: MIT 

// 00000000000000000
// I changed all the msg.sender to tx.origin because if this is sent from another smart contract we cannot see who sent the message

pragma solidity ^0.8.9;

//The uint are public, so we can observe them 
//The adress who send the donation must be able to receive it --> payable
//Immutable: we cannot change it after the deployment of the constructor 
contract FundRaising {
    address payable public immutable beneficiary;
    uint public goal;
    uint public endTime;
    uint public total = 0;
    
    // The storage, key -> value type. So the adress send some donation which is a uint 
    mapping(address=>uint) donations;
    
    //The constructor is a special function that is executed when the contract is deployed.
    //To initialize state variables of the contract. The ones we have at the beginning so: 
    //Owner: to know who send the transaction, automatic
    //Goal: we have to write it, how much money we hope to have with the fundraising
    //Endtime: we have to define it, how much time is the fundraising 
    constructor(uint _goal, uint _timeLimitinminutes, address _beneficiary)  {
        beneficiary = payable(_beneficiary);
        goal = _goal;
        endTime = block.timestamp + _timeLimitinminutes * 1 minutes;
    }

    //Donation function: to give money in the fund before the time is over and before a certain goal is reached 
    //The value of the donation must be higher than 0 
    //The values of the donations are compiled, so that we know for each message sender how much he gave and he can make multiple donations
    //The total of all donations is the total of all values send.
    function donate() payable public {
        require(block.timestamp < endTime, "Time is over, Fundraising is closed.");
        require(total < goal, "We reached the goal.");
        require(msg.value > 0, "You will send a value of zero, you need to send some ether");
        donations[tx.origin] += msg.value; 
        total += msg.value;
    }

    // If the fundraising doesn't get the required amount, the donators can withdraw their donations
    // We don't have to remeber how much we gave. Just click withdraw
    // The time fixed to give the donations must be over 
    // The goal of the donation must not be attained 
    // All the donations from the message sender are substracted from the total 
    // His or her donations are now 0 and the amount is transfered 
    function withdraw() public {
        require(block.timestamp > endTime, "The time is not over, the Fundraising not closed");
        require(total < goal, "Can not withdraw when fundraising is successful, the expected amount is collected");
        uint amount = donations[tx.origin];
        total -= amount;
        donations[tx.origin] = 0;
        payable(tx.origin).transfer(amount);
    }  
    //Once the fundraising came to an end, so that the amount required is collected.
    //The fundraising owner (so the one that sent it first) can collect his/her donations
    //To collect the donations, the goal fixed must be attained. 
    //The time must not be ended to withdraw the money. 
    function withdrawOwner() public {
        require(payable(tx.origin) == beneficiary, "You must be owner of the fundraising to withdraw it");
        require(total >= goal, "Fundraising not closed yet, the expected amount is not collected yet");
        beneficiary.transfer(address(this).balance);
    }
    //A function to see how much a donator spent in the fund.
    function GetTheSumofDonations() public view returns (uint256)  {
        return donations[tx.origin];
