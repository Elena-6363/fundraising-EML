// SPDX-License-Identifier: MIT 

// 00000000000000000
pragma solidity ^0.8.9;

contract FundRaising {
    address payable owner;
    uint public goal;
    uint public endTime;
    uint public total = 0;
    
    mapping(address=>uint) donations;
    
    constructor(uint _goal, uint _timeLimitinminutes)  {
        owner = payable(msg.sender);
        goal = _goal;
        endTime = block.timestamp + _timeLimitinminutes * 1 minutes;
    }
    
    function donate() payable public {
        require(block.timestamp < endTime, "Time is over, Fundraising is closed.");
        require(total < goal, "We reached the goal.");
        require(msg.value > 0, "You will send a value of zero, you need to send some ether");
        donations[msg.sender] += msg.value; 
        total += msg.value;
    }
    
    // Once the fundraising came to an end, so that the amount required is collected, the fundraising owner can collect his/her donations
    function withdrawOwner() public {
        require(payable(msg.sender) == owner, "You must be owner of the fundraising to withdraw it");
        require(total >= goal, "Fundraising not closed yet, the expected amount is not collected yet");
        owner.transfer(address(this).balance);
    }
    
    // If the fundraising doesn't get the required amount, the donators can withdraw their donations
    // We don't have to remeber how much we gave. Just click withdraw
    function withdraw() public {
        require(block.timestamp > endTime, "The time is not over, the Fundraising not closed");
        require(total < goal, "Can not withdraw when fundraising was successful, the expected amount is collected");
        uint amount = donations[msg.sender];
        total -= amount;
        donations[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }
}
